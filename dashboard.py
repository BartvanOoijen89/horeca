import streamlit as st
import pandas as pd
import joblib
from datetime import datetime
from pathlib import Path
from utils import get_weather

# üìÅ Configuratie
MODEL_PATH = "model_per_product.pkl"
EXCEL_PATH = "Horeca-data 2025 (Tot 19 mei 2025).xlsx"
VERKOOPDATA_DIR = "verkoopdata"

# üß† Model inladen
@st.cache_resource
def load_model_dict():
    return joblib.load(MODEL_PATH)

model_dict = load_model_dict()

# üìÑ Excel laden
@st.cache_data
def load_begroting():
    return pd.read_excel(EXCEL_PATH, parse_dates=["Datum"])

df = load_begroting()

# üóìÔ∏è Datumkeuze
st.set_page_config(page_title="üìä Horeca Verkoopvoorspelling Appeltern", layout="wide")
st.title("üìä Verkoopvoorspelling per Product ‚Äì Appeltern")
date_input = st.date_input("üìÖ Kies een datum", datetime.today())

# üîç Rij ophalen
row = df[df["Datum"] == pd.to_datetime(date_input)]

if row.empty:
    st.warning("‚ö†Ô∏è Geen bezoekersdata gevonden voor deze datum.")
    st.stop()

# üë• Bezoekersaantal bepalen
if not pd.isna(row.iloc[0]["Werkelijk aantal bezoekers"]):
    bezoekers = int(row.iloc[0]["Werkelijk aantal bezoekers"])
    st.success(f"üë• Werkelijk bezoekersaantal: {bezoekers}")
else:
    bezoekers = int(row.iloc[0]["Begroot aantal bezoekers"])
    st.info(f"‚ÑπÔ∏è Werkelijk bezoekersaantal ontbreekt, gebruik gemaakt van begroting: {bezoekers}")

# üå¶Ô∏è Weerdata ophalen
api_key = st.secrets["weather"]["api_key"]
temperatuur, neerslag = get_weather(api_key=api_key, date=date_input)

col1, col2 = st.columns(2)
with col1:
    st.metric("üå°Ô∏è Temperatuur", f"{temperatuur:.2f}¬∞C")
with col2:
    st.metric("üåßÔ∏è Neerslag", f"{neerslag:.2f} mm")

# üßæ Verkoopdata laden
verkoopfile = Path(VERKOOPDATA_DIR) / f"Verkochte-Producten-Entree_{date_input.strftime('%d-%m-%Y')}.csv"

if verkoopfile.exists():
    verkoop_df = pd.read_csv(verkoopfile, sep=";")
    st.subheader("üßæ Verkoopdata vandaag")
    st.dataframe(verkoop_df)

    if "Omzetgroep naam" in verkoop_df.columns:
        productgroepen = verkoop_df["Omzetgroep naam"].dropna().unique()
    else:
        st.error("‚ùå Kolom 'Omzetgroep naam' ontbreekt in verkoopdata.")
        productgroepen = []
else:
    st.warning(f"‚ö†Ô∏è Geen verkoopbestand gevonden: {verkoopfile.name}")
    productgroepen = list(model_dict.keys())

# üîÆ Voorspellingen
def predict_verkoop(productgroepen, bezoekers, temperatuur, neerslag):
    resultaten = []
    for groep in productgroepen:
        if isinstance(groep, str) and groep in model_dict:
            model = model_dict[groep]
            X = pd.DataFrame([{
                "Bezoekers": bezoekers,
                "Gemiddelde temperatuur (C)": temperatuur,
                "Gemiddelde neerslag (mm)": neerslag,
                "Weekdag": date_input.weekday()
            }])
            y_pred = model.predict(X)[0]
            resultaten.append((groep, round(y_pred)))
    return pd.DataFrame(resultaten, columns=["Productgroep", "Voorspelling"])

# üìà Resultaten tonen
st.subheader("üîÆ Voorspellingen")
if len(productgroepen) > 0:
    voorspelling_df = predict_verkoop(productgroepen, bezoekers, temperatuur, neerslag)
    if not voorspelling_df.empty:
        st.dataframe(voorspelling_df)
    else:
        st.error("‚ö†Ô∏è Geen voorspellingen mogelijk voor geselecteerde productgroepen.")
else:
    st.info("‚ÑπÔ∏è Geen productgroepen beschikbaar om voorspellingen op te doen.")
